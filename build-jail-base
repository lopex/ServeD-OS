#!/Software/Zsh/exports/zsh

unset CC CPP CXX CFLAGS CXXFLAGS LDFLAGS MANPATH PATH PKG_CONFIG_PATH MAIL

export PATH=/bin:/sbin:/usr/bin:/usr/sbin

set -e

# FreeBSD base version:
readonly OS_VER="$1"
if [ "${OS_VER}" = "" ]; then
    error "No version specified!"
fi

readonly MAIN_REPOSITORY="$2"
if [ "${MAIN_REPOSITORY}" = "" ]; then
    error "No main repository specified!"
fi

readonly CURRENT_BRANCH="$3"
if [ "${CURRENT_BRANCH}" = "" ]; then
    error "No current branch specified!"
fi

readonly ARCH="$4"
if [ "${ARCH}" = "" ]; then
    error "No architecture specified!"
fi
if [ "${ARCH}" = "arm" ]; then
    readonly ARCH_SUBTYPE="armv6hf"
else
    readonly ARCH_SUBTYPE="${ARCH}"
fi

# read sofin definitions
readonly CONF_FILE="/etc/s.conf"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
    validate_env
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Sofin isn't installed properly."
    exit 1
fi

readonly SERVEDOS_GIT_ORIGIN="https://verknowsys@bitbucket.org/verknowsys/served-os.git"
readonly SERVED_REPO="/var/ServeD-OS"
readonly PARALLEL_JOBS="${CPUS}"
readonly SHARED_DIR="/Jails/Shared"
readonly DIFFS_DIR="${SHARED_DIR}/Diffs"
readonly LOG_OUTPUT="/var/log/build-$(${DATE_BIN} +%F 2>/dev/null).log"

if [ ! -d "${SERVED_REPO}" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${SERVEDOS_GIT_ORIGIN}
else
    cd ${SERVED_REPO}
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${SERVEDOS_GIT_ORIGIN}
fi

# main()
${RM_BIN} -f ${LOG_OUTPUT}
${TOUCH_BIN} ${LOG_OUTPUT}
echo "Process started for OS version: ${OS_VER}, architecture: ${ARCH}, timestamp: @${TIMESTAMP}" >> ${LOG_OUTPUT}
note "Process started for OS version: ${OS_VER}, architecture: ${ARCH}, timestamp: @${TIMESTAMP}"

cd /var
if [ ! -d "${OS_VER}-src" ]; then
    # svn co http://svn0.eu.FreeBSD.org/base/releng/${OS_VER} ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone --single-branch --branch ${CURRENT_BRANCH} ${MAIN_REPOSITORY} ${OS_VER}-src
    cd ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} checkout -B ${CURRENT_BRANCH} > /dev/null 2>&1 || true
else
    cd ${OS_VER}-src
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} checkout ${CURRENT_BRANCH} > /dev/null 2>&1
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull origin ${CURRENT_BRANCH}
    note "Working on branch: $(${GIT_BIN} branch)"
fi

note "Setting up src.conf"
${RM_BIN} -fv /etc/src.conf >> ${LOG_OUTPUT}
${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/ >> ${LOG_OUTPUT}

note "Syncing sources to src"
time ${RSYNC_BIN} -l -p -E -A -X -o -g -t -r --delete /var/${OS_VER}-src/ /usr/src/

cd /usr/src
TIMESTAMP="$(${DATE_BIN} +%F-%s)"
DESTBASE="${SHARED_DIR}/${OS_NAME}-${OS_VER}-${ARCH}"
${ZFS_BIN} create ${DEFAULT_ZPOOL}${DESTBASE} 2>> ${LOG_OUTPUT} || true
# DESTDIR="${DESTBASE}-${TIMESTAMP}"

note "Preparing kernel configuration"
GIT_SSL_NO_VERIFY=true ${GIT_BIN} reset --hard >> ${LOG_OUTPUT}
rm -fv sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
if [ "${ARCH}" = "arm" ]; then
    cp -v ${SERVED_REPO}/kernel/VERKNOWSYS-${OS_VER}-RPI2 sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
else
    cp -v ${SERVED_REPO}/kernel/VERKNOWSYS-${OS_VER} sys/${ARCH}/conf/VERKNOWSYS >> ${LOG_OUTPUT}
fi

note "Patching sources" # (exporting libucl, libxo, adding svdsysup to init apps)"
# spawn svdinit first:
sed -i '' -e 's#"/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#"/sbin/svdinit:/sbin/init:/sbin/oinit:/sbin/init.bak:/rescue/init"#' sys/kern/init_main.c

# export libucl:
note "Exporting UCL as regular OS library"
sed -i '' -e 's/PRIVATELIB=.*$//' lib/libucl/Makefile
patch -p0 -f < ${SERVED_REPO}/src/patches/export_ucl.patch >> ${LOG_OUTPUT}

set +e
echo ${OS_VER} | grep "11" > /dev/null 2>&1
if [ "$?" = "0" ]; then
    # https://github.com/freebsd/freebsd/commit/6471c2fc7c1fced2b5d2073b1629aa76588c61e2:
    sed -i '' -e 's#32#48#' sys/boot/efi/loader/copy.c
else
    sed -i '' -e 's#32#48#' sys/boot/amd64/efi/copy.c
fi

set -e

if [ -z "${DONT_BUILD_WORLD}" ]; then
    note "Building world"
    make buildworld -j${PARALLEL_JOBS} DEBUG= DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE}  >> ${LOG_OUTPUT}  2>&1
fi

note "Building kernel"
make buildkernel -j${PARALLEL_JOBS} DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT} 2>&1

note "Wiping out previous world"
rm -rf ${DESTBASE}/* >> ${LOG_OUTPUT}  2>&1

note "Creating snapshot of destbase: ${DESTBASE}@${TIMESTAMP}_begin"
${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}${DESTBASE}@${TIMESTAMP}_begin

note "Installing kernel"
make installkernel DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT} 2>&1

if [ -z "${DONT_BUILD_WORLD}" ]; then
    rm -rf /var/tmp/temproot

    note "Merging Pre-buildworld configuration"
    mergemaster -p -a >> ${LOG_OUTPUT} 2>&1

    note "Installing world"
    make installworld DEBUG= DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT}  2>&1

    note "Merging configuration in: ${DESTBASE}"
    mergemaster -P -a -D${DESTBASE} >> ${LOG_OUTPUT} 2>&1

    note "Deleting old dirs, files and libs"
    yes | make delete-old delete-old-libs DESTDIR=${DESTBASE} TARGET=${ARCH} TARGET_ARCH=${ARCH_SUBTYPE} >> ${LOG_OUTPUT}  2>&1 || true
fi

note "Cleaning up"
make clean >> ${LOG_OUTPUT} 2>&1

note "Snapshotting after installation"
${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}${DESTBASE}@${TIMESTAMP}_end

note "Storing fs diff"
mkdir -p ${DIFFS_DIR} > /dev/null 2>&1
${ZFS_BIN} send -i ${DEFAULT_ZPOOL}${DESTBASE}@${TIMESTAMP}_begin ${DEFAULT_ZPOOL}${DESTBASE}@${TIMESTAMP}_end > ${DIFFS_DIR}/build-${TIMESTAMP}.zfs

note "Stopping any running jails"
for node in $(gvr list | awk '{print $1;}'); do
    gvr stop ${node} || true
done

echo "Process finished @${TIMESTAMP}" >> ${LOG_OUTPUT}
note "Process finished @${TIMESTAMP}"
