#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#

set -e

# tunables:
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"
INSTALL_SCRIPT_VERSION="0.6.0"
SYSTEM_VERSION="11.0" # the default
DEFAULT_ZPOOL="zroot"
INTERNAL_NETWORK="10.2.1.0"
ORIGIN="origin"

# const definitions:
SERVEDOS_GIT_ORIGIN="https://verknowsys@bitbucket.org/verknowsys/served-os.git"
DEFAULT_SOFIN_REPOSITORY="https://verknowsys@bitbucket.org/verknowsys/sofin.git"
BASE="ServeD-OS-Base"
BASE_SOURCE="http://served.verknowsys.com/"
TIMESTAMP="$(date +%s 2>/dev/null)"
VKS_KERNEL="/boot/verknowsys"
SOFIN_REPO="/var/sofin"
SERVED_REPO="/var/ServeD-OS"
LOG="/var/log/svd-install-${TIMESTAMP}.log"
CACHE_DIR="/var/.cache"
DEFAULT_SHELL="/Software/Zsh/exports/zsh"
ZFS_CREATE_OPTS_FOR_ROOT_ELEMS=" -o dedup=on -o compression=lz4 -o mountpoint=none -o casesensitivity=sensitive"
DEFAULT_JAIL_PRISON_LOCATION="/Jails/Prison"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
DEFAULT_SYSTEM_PREFIX="/usr/bin"
ARCH="$(uname -m 2>/dev/null)"
UNAME_OS="$(uname -s 2>/dev/null)"
OS_TRIPPLE="${SYSTEM_VERSION}-${ORIGIN}-${ARCH}"
PF_CONF_FILE="/etc/pf.conf"
RC_FILE="/etc/rc"
GIT_BIN="/Software/Git/exports/git"
ZFS_BIN="/sbin/zfs"
SVDINIT_BIN="/sbin/svdinit"
SVDINIT_BACKUP_BIN="/var/.svdinit"
DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/${UNAME_OS}-${SYSTEM_VERSION}-${ARCH}"
LATEST_VERSION="$(fetch -q -o - ${BASE_SOURCE}/version-latest 2>/dev/null)"
VERSION="$(zfs get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
if [ "${VERSION}" = "-" ]; then
    printf "No version specified. Picking last version: ${LATEST_VERSION}\n"
else
    if [ "${VERSION}" = "${LATEST_VERSION}" ]; then
        if [ "$1" = "-f" ]; then
            printf "Forcing installation of ServeD base system in version: ${VERSION}\n"
        else
            printf "You are already using latest version: ${VERSION} of ServeD base system\n"
            exit 0
        fi
    fi
fi
VERSION="${LATEST_VERSION}"

# sanity checks
if [ "$(uname 2>/dev/null)" != "FreeBSD" ]; then
    printf "Only 64bit HardenedBSD hosts are supported by installer\n"
    exit 1
fi

set +e
printf "Trapping shell signals..\n"
trap '' EXIT INT TERM QUIT TTIN TTOU
set -e

mkdir -p ${CACHE_DIR} >> ${LOG} 2>&1
if [ ! -f "${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz" ]; then
    printf "Base snapshot archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/Software-${OS_TRIPPLE}.zfs.xz -o ${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz
    if [ "$?" != "0" ]; then
        printf "Software snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

if [ ! -f "${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz" ]; then
    printf "Jails archive wasn't downloaded yet\n"
    fetch ${BASE_SOURCE}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz -o ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz
    if [ "$?" != "0" ]; then
        printf "Jails binary snapshot isn't available, or something just went wrong while fetching archive\n"
        exit 1
    fi
fi

set +e
zfs list 2>/dev/null | grep 'Software/root' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    set -e
    printf "Initializing origin of: '${DEFAULT_ZPOOL}/Software'\n"
    zfs create ${ZFS_CREATE_OPTS_FOR_ROOT_ELEMS} ${DEFAULT_ZPOOL}/Software

    printf "Receiving dataset: '${DEFAULT_ZPOOL}/Software/root' from a snapshot file\n"
    xzcat ${CACHE_DIR}/Software-${OS_TRIPPLE}.zfs.xz | zfs receive -v ${DEFAULT_ZPOOL}/Software/root 2>/dev/null | tail -n1
    zfs rename ${DEFAULT_ZPOOL}/Software/root@--head-- @${ORIGIN}
    zfs set mountpoint=/Software ${DEFAULT_ZPOOL}/Software/root
fi
set +e
zfs list 2>/dev/null | grep 'User/root' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    set -e
    printf "Initializing origin of ${DEFAULT_ZPOOL}/User\n"
    zfs create ${ZFS_CREATE_OPTS_FOR_ROOT_ELEMS} ${DEFAULT_ZPOOL}/User

    printf "Creating ${DEFAULT_ZPOOL}/User/root\n"
    zfs create -o mountpoint=/User ${DEFAULT_ZPOOL}/User/root
fi
set -e


create_dset_if_doesnt_exist () {
    set +e
    mntpt="${1}"
    mount_opt="${2}"
    zfs list | grep "${DEFAULT_ZPOOL}${mntpt} " > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        set -e
        zfs create -o mountpoint=${mount_opt} "${DEFAULT_ZPOOL}${mntpt}"
    fi
    set -e
}


# create zvols for special snappable dirs
for mntpoint in /Jails ${DEFAULT_JAIL_SHARED_LOCATION} ${DEFAULT_JAILS_ROOT_DIR} ${DEFAULT_JAIL_PRISON_LOCATION} ${DEFAULT_JAIL_PRISON_LOCATION}/Cells ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry /Services /Services/root /Shared /Shared/root; do
    if [ ! -d "${mntpoint}" ]; then
        printf "Creating zvol: ${mntpoint}\n" >> ${LOG} 2>&1
        case ${mntpoint} in
            /Services|/Shared)
                create_dset_if_doesnt_exist "${mntpoint}" "none" # mountpoint=none for all "root" datasets
                ;;

            *)
                create_dset_if_doesnt_exist "${mntpoint}" "${mntpoint}"
                ;;
        esac
    fi
done

set +e
printf "Setting up default mountpoint values..\n"

elem="${DEFAULT_ZPOOL}/Services/root"
sroot="$(zfs get -H -o value mountpoint ${elem} 2>/dev/null)"
if [ "${sroot}" != "/Services" ]; then
    zfs set mountpoint=/Services ${elem}
fi

elem="${DEFAULT_ZPOOL}/Shared/root"
sroot="$(zfs get -H -o value mountpoint ${elem} 2>/dev/null)"
if [ "${sroot}" != "/Shared" ]; then
    zfs set mountpoint=/Shared ${elem}
fi

elem="${DEFAULT_ZPOOL}/User/root"
sroot="$(zfs get -H -o value mountpoint ${elem} 2>/dev/null)"
if [ "${sroot}" != "/User" ]; then
    zfs set mountpoint=/User ${elem}
fi

printf "Creating origin snapshots..\n"
zfs list -t snap 2>/dev/null | grep 'User/root@' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf " * ${DEFAULT_ZPOOL}/User/root@${ORIGIN}\n"
    zfs snapshot ${DEFAULT_ZPOOL}/User/root@${ORIGIN}
fi

zfs list -t snap 2>/dev/null | grep 'Services/root@' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf " * ${DEFAULT_ZPOOL}/Services/root@${ORIGIN}\n"
    zfs snapshot ${DEFAULT_ZPOOL}/Services/root@${ORIGIN}
fi

zfs list -t snap 2>/dev/null | grep 'ROOT@' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf " * ${DEFAULT_ZPOOL}/ROOT@${ORIGIN}\n"
    zfs snapshot ${DEFAULT_ZPOOL}/ROOT@${ORIGIN}
fi

zfs list -t snap 2>/dev/null | grep 'ROOT/default@' > /dev/null 2>&1
if [ "$?" != "0" ]; then
    printf " * ${DEFAULT_ZPOOL}/ROOT/default@${ORIGIN}\n"
    zfs snapshot ${DEFAULT_ZPOOL}/ROOT/default@${ORIGIN}
fi
set -e

printf "Installing ServeD base: ${SYSTEM_VERSION}-v${VERSION}\n"
tar xf ${CACHE_DIR}/${BASE}-${SYSTEM_VERSION}-v${VERSION}-${ARCH}.tar.xz --directory /
if [ "$?" != "0" ]; then
    printf "ERROR: Base snapshot is corrupted or something just went wrong with archive\n"
    exit 1
fi
set +e

export HOME="/User"
export PWD="/User"
if [ -f "${HOME}/.gitconfig" ]; then
    grep -R 'ServeD' "${HOME}/.gitconfig" >/dev/null 2>&1
    if [ "$?" != "0" ]; then
        printf "Detected no local Git configuration\n"
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} config --global user.name "ServeD node" 2>/dev/null
        GIT_SSL_NO_VERIFY=true ${GIT_BIN} config --global user.email "admin@verknowsys.com" 2>/dev/null
    else
        printf "Local Git configuration looks fine\n"
    fi
fi
set -e

if [ ! -d "${SOFIN_REPO}" ]; then
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${DEFAULT_SOFIN_REPOSITORY}
    cd ${SOFIN_REPO}
else
    cd ${SOFIN_REPO}
    ${GIT_BIN} stash save "install-update-${TIMESTAMP}"
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${DEFAULT_SOFIN_REPOSITORY}
fi

bin/install
readonly CONF_NAME="s.conf"
readonly LOCAL_CONF_FILE="${SOFIN_REPO}/src/${CONF_NAME}"
if [ -e "${LOCAL_CONF_FILE}" ]; then
    . "${LOCAL_CONF_FILE}"
    ${SOFIN_BIN} reset
else
    echo "FATAL: No configuration file found: ${LOCAL_CONF_FILE}. Sofin wasn't installed properly?"
    exit 1
fi
note "Sofin installed."

################################################################################
#
#                   Sofin environment initialized from now on.
#
################################################################################

JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${SYSTEM_VERSION}-${SYSTEM_ARCH}"

if [ "${SHELL}" != "${DEFAULT_SHELL}" ]; then
    set +e
    ${GREP_BIN} -R 'Zsh/exports/zsh' /etc/shells > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        note "Appending /etc/shells with: '${DEFAULT_SHELL}'."
        ${PRINTF_BIN} "${DEFAULT_SHELL}\n" >> /etc/shells
    fi
    note "Setting '${DEFAULT_SHELL}' as default shell."
    ${CHSH_BIN} -s ${DEFAULT_SHELL}
fi

list="Rsync-static Mosh Tmux Syslog-ng"
case ${ARCH} in
    arm|arm32|arm64)
        ;;

    *)
        list="${list} Glusterfs"
        ;;
esac
note "Installing additional software bundles: ${list}"
${SOFIN_BIN} install ${list}

note "Synchronizing /boot and boot loader configuration."
${RM_BIN} -f /tmp/tmp-loader.conf
${CP_BIN} -v /boot/loader.conf /tmp/tmp-loader.conf
${RSYNC_BIN} --exclude 'kernel' --links --delete --compress --perms --executability --acls --xattrs --owner --group --times --recursive ${JAIL_SOURCE}/boot/ /boot >> ${LOG}  2>&1
${CP_BIN} -v /tmp/tmp-loader.conf /boot/loader.conf

note "Installing custom kernel"
if [ ! -d "${VKS_KERNEL}" ]; then
    ${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL} >> ${LOG} 2>&1
else
    ${RM_BIN} -rf ${VKS_KERNEL}.old
    ${MV_BIN} ${VKS_KERNEL} ${VKS_KERNEL}.old >> ${LOG} 2>&1
    ${CP_BIN} -vr ${JAIL_SOURCE}/boot/kernel ${VKS_KERNEL} >> ${LOG} 2>&1
fi

note "Updating sudo for ${SYSTEM_VERSION} jail base"
${CP_BIN} /Software/Sudo-static/bin/sudo ${JAIL_SOURCE}/usr/bin/
${CHMOD_BIN} 4755 ${JAIL_SOURCE}/usr/bin/sudo

if [ -d "${SERVED_REPO}" ]; then
    cd ${SERVED_REPO}
    ${GIT_BIN} reset --hard
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${SERVEDOS_GIT_ORIGIN}
else
    cd /var
    GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${SERVEDOS_GIT_ORIGIN} ServeD-OS
fi

for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    test -f $f && chflags -v noschg $f
done
note "Deploying: ${SVDINIT_BIN}"
if [ -f "${SVDINIT_BIN}" ]; then
    ${RM_BIN} -f ${SVDINIT_BIN}
fi
clang -c ${SERVED_REPO}/src/getmntopts.c -o ${SERVED_REPO}/src/getmntopts.o
clang -static -o ${SVDINIT_BIN} ${SERVED_REPO}/src/svdsysup.c \
    -lutil -lcrypt -DSECURE -DLOGIN_CAP ${SERVED_REPO}/src/getmntopts.o
if [ "$?" = "0" ]; then
    note "Preparing backup from current version of ${SVDINIT_BIN}"
    strip ${SVDINIT_BIN}
    ${RM_BIN} -f ${SVDINIT_BACKUP_BIN}
    ${CP_BIN} -v ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}
else
    warn "ServeD init replacement failed to build, cause of some strange reason! Restoring backup version of: ${SVDINIT_BIN}"
    ${CP_BIN} -v ${SVDINIT_BACKUP_BIN} ${SVDINIT_BIN}
fi
for f in ${SVDINIT_BIN} ${SVDINIT_BACKUP_BIN}; do
    test -f $f && chflags -v schg $f
done


note "Setting up rc.svdsysup"
${CP_BIN} -v ${SERVED_REPO}/etc/rc.svdsysup /etc/

note "Setting up default shell environment"
${CP_BIN} -v ${SERVED_REPO}/etc/zshenv.served /etc/zshenv

note "Setting up default boot loader configuration"
${CP_BIN} -v ${SERVED_REPO}/etc/loader.conf.served /boot/loader.conf

note "Setting up make.conf and src.conf"
${CP_BIN} -v ${SERVED_REPO}/etc/make.conf /etc/make.conf
${CP_BIN} -v ${SERVED_REPO}/etc/src.conf /etc/src.conf

note "Setting up mime types"
${CP_BIN} -v ${SERVED_REPO}/etc/mime.types.served /etc/mime.types

# configure currently installed default system logger - syslog-ng..
# or replace default syslogd with preconfigured syslog-ng
SYSLOGNG_PREFIX="/Services/Syslog-ng"

note "Setting up system logger"
${MKDIR_BIN} -p ${SYSLOGNG_PREFIX}/etc ${SYSLOGNG_PREFIX}/var
${CP_BIN} -v ${SERVED_REPO}/etc/syslog-ng/syslog-ng.conf ${SYSLOGNG_PREFIX}/etc/
${CP_BIN} -v ${SERVED_REPO}/etc/syslog-ng/scl.conf ${SYSLOGNG_PREFIX}/etc/

note "Updating rc.d scripts"
if [ ! -x "/etc/rc.d/buildhost" ]; then
    note "Creating rc script for buildhost"
    ${INSTALL_BIN} -v ${SERVED_REPO}/etc/rc.d/buildhost /etc/rc.d
fi

if [ ! -x "/etc/rc.d/syslog-ng" ]; then
    note "Creating rc script for syslog-ng"
    ${CP_BIN} -v /etc/rc.d/syslogd /etc/rc.d/syslog-ng
    ${SED_BIN} -i '' -e 's#pidfile=.*$#pidfile="/var/run/syslog-ng.pid"#' /etc/rc.d/syslog-ng
    ${SED_BIN} -i '' -e 's#syslogd#syslog_ng#g' /etc/rc.d/syslog-ng
fi

set +e
${GREP_BIN} -R 'syslogd_enable' /etc/rc.conf 2>/dev/null | ${GREP_BIN} '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    note "Disabling syslogd, replacing it with: syslog-ng"
    service syslogd stop >/dev/null 2>&1
    killall -9 syslogd >/dev/null 2>&1
    set -e
    ${SED_BIN} -i '' -e 's#^.*syslogd_enable.*=.*$##g' /etc/rc.conf
else
    ${PS_BIN} axv 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} 'syslog-ng' >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        set -e
        note "Reloading Syslog-ng"
        service syslog-ng reload 2>> ${LOG}
    fi
fi
set -e

note "Setting up sysctl"
${TEST_BIN} -f /etc/sysctl.conf || ${CP_BIN} -v ${SERVED_REPO}/etc/sysctl.conf.served /etc/sysctl.conf

note "Setting up periodic"
${TEST_BIN} -f /etc/periodic.conf ||${CP_BIN} -v ${SERVED_REPO}/etc/periodic.conf.served /etc/periodic.conf

note "Setting up defaults for: ttys, login.conf"
${CP_BIN} -v ${SERVED_REPO}/etc/ttys.served /etc/ttys
${CP_BIN} -v ${SERVED_REPO}/etc/login.conf.served /etc/login.conf
${CAP_MKDB_BIN} /etc/login.conf

note "Setting up network"
readonly DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 2>/dev/null | ${TAIL_BIN} -n 4 2>/dev/null | ${HEAD_BIN} -n 1 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
readonly GVR_HOST_IP_ADDR="$(ifconfig ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} -v grep 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
readonly DEFAULT_HOST_ADDRESS_FILE="/etc/host.default"
readonly NETS_LIST="$(${IFCONFIG_BIN} ${DEFAULT_INTERFACE} 2>/dev/null | ${GREP_BIN} inet 2>/dev/null | ${AWK_BIN} '{print $2;}' 2>/dev/null)"
readonly AMOUNT=$(${PRINTF_BIN} "${NETS_LIST}\n" | ${WC_BIN} -l 2>/dev/null)
NETS=""
if [ ${AMOUNT} -eq 1 ]; then
    ${PRINTF_BIN} "${NETS_LIST}\n" > ${DEFAULT_HOST_ADDRESS_FILE}
else
    note "Detected several IP addresses!"
    sleep 2
    for net in ${NETS_LIST}; do
        NETS="$NETS $net - "
    done
    ${DIALOG_BIN} --menu "Pick main IP address:" 0 0 0 ${NETS} 2> ${DEFAULT_HOST_ADDRESS_FILE}
fi

note "Setting up PF firewall.."
DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} ${DEFAULT_HOST_ADDRESS_FILE} 2>/dev/null)"
${CP_BIN} -v ${SERVED_REPO}${PF_CONF_FILE}.served ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__INTERNAL_NETWORK/${INTERNAL_NETWORK}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_INTERFACE/${DEFAULT_INTERFACE}/g" ${PF_CONF_FILE}
${SED_BIN} -i '' -e "s/__EXTERNAL_ADDRESS/${DEFAULT_INTERFACE_ADDRESS}/g" ${PF_CONF_FILE}
${TOUCH_BIN} ${PF_CONF_FILE}.local

set +e
grep -R 'pf_enable' /etc/rc.conf 2>/dev/null | grep '"YES"' > /dev/null 2>&1
if [ "$?" = "0" ]; then
    set -e
    note "PF firewall is restarting.."
    service pf restart
    note "Applied firewall rules:\n$(${PFCTL_BIN} -sn 2>/dev/null)"
else
    warn "PF firewall is disabled in '/etc/rc.conf'. Skipping"
fi

set +e
grep -R 'ServeD-Install-Script' /etc/rc.conf >/dev/null 2>&1
if [ "$?" != "0" ]; then
    set -e
    note "ServeD special not found in /etc/rc.conf. Appending default RC configuration."
    ${CAT_BIN} ${SERVED_REPO}/etc/rc.conf.served >> /etc/rc.conf
fi
set -e

TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
note "Installing root TLS/SSL certificates"
${MKDIR_BIN} -p /etc/ssl
if [ -f /etc/ssl/cert.pem ]; then
    ${MV_BIN} -v /etc/ssl/cert.pem /etc/ssl/cert.pem-${TIMESTAMP}
fi
${CP_BIN} -v ${SERVED_REPO}/etc/ssl/cacert.pem /etc/ssl/cert.pem

UNWANTED_DIRS="/mnt /media /proc /COPYRIGHT /sys /var/mail /usr/home /var/mail /var/tmp"
note "Forcing destroy of unnecessary datasets: ${DEFAULT_ZPOOL}[${UNWANTED_DIRS}]"
for unnec in ${UNWANTED_DIRS}; do
    set +e
    ${ZFS_BIN} list | ${GREP_BIN} "${unnec} " >/dev/null 2>&1
    if [ "$?" = "0" ]; then
        set -e
        ${ZFS_BIN} destroy -f ${DEFAULT_ZPOOL}${unnec}
    fi
    set -e
    ${RM_BIN} -rf "${unnec}"
done

note "Installing host Governor"
${INSTALL_BIN} -v ${SERVED_REPO}/gvr ${DEFAULT_SYSTEM_PREFIX}

note "Checking for a ZFS-feature-updates of zpool: ${DEFAULT_ZPOOL}"
${ZPOOL_BIN} upgrade ${DEFAULT_ZPOOL} | ${HEAD_BIN} -n1

disks=$(geom disk list 2>/dev/null | ${GREP_BIN} 'Name:\ d.*' 2>/dev/null | ${SED_BIN} 's/^.*\ //' 2>/dev/null)
if [ -z "${disks}" ]; then
    error "System GEOM detected NO hard disks available on this machine. How can I do my thing? -_-"
fi
for disk in $disks; do
    note "Updating ZFS bootcode for disk: '${disk}'."
    gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${disk}
    if [ "$?" != "0" ]; then
        warn "Bootcode update finished with an error for disk: ${disk}!"
        sleep 2
    fi
done
note "Generating new hints for '${VKS_KERNEL}' kernel."
kldxref ${VKS_KERNEL}

note "Updating system properties.."
${ZFS_BIN} set com.svd:version=${LATEST_VERSION} ${DEFAULT_ZPOOL}/ROOT
${ZFS_BIN} set com.svd:os_version=${SYSTEM_VERSION} ${DEFAULT_ZPOOL}/ROOT

set +e
${UNAME_BIN} -a | ${GREP_BIN} VERKNOWSYS > /dev/null 2>&1
if [ "$?" = "0" ]; then
    note
    note "ServeD system update complete!"
else
    note
    note "ServeD system installation complete!"
fi
note
note "Update process will continue after reboot.."

set -e
${TOUCH_BIN} /.svdsysup

exit 0
