#!/bin/sh
#
# @author Daniel (dmilith) Dettaff
#
# TODO: gvr copy-attrs sourcejailname destjailname

# load configuration from sofin.conf
readonly CONF_NAME="s.conf"
readonly CONF_FILE="/etc/${CONF_NAME}"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
else
    echo "FATAL: No configuration file found: ${CONF_FILE}. Maybe Sofin isn't installed?"
    exit 1
fi


GVR_VERSION="0.16.2"
ORIGIN="origin"
KERN_SECURELEVEL="0"
BRIDGE_DEVICE="bridge0"
VLAN_DEVICE="vlan"
LOG_FILE="/var/log/governor.log"
SERVED_REPO="/var/ServeD-OS"
SOFIN_REPO="/var/sofin"
DEFAULT_SOFIN_REPO="https://verknowsys@bitbucket.org/verknowsys/sofin.git"
SERVICE_SPAWNER_BIN="/Software/Thess/exports/svdss"
IGNITER_INSTALL_BIN="/Software/Thess/exports/ignitersinstall"
DEFAULT_ZPOOL="zroot"
DEFAULT_VERSION="11.0"
stored_version="$(zfs get -H -o value com.svd:os_version ${DEFAULT_ZPOOL}/ROOT)"
if [ "${stored_version}" != "-" ]; then
    DEFAULT_VERSION="${stored_version}"
fi
DEFAULT_JAIL_USER="worker"
DEFAULT_WORKER_UID="501"
DEFAULT_QUOTA_LIMIT="3G"
DEFAULT_ROOT_QUOTA_LIMIT="2G"
DEFAULT_SENTRY_LIMIT="128M"
DEFAULT_LIMIT_MAX_MEMORY="512M"
DEFAULT_LIMIT_MAX_VMEMORY="1024M"
DEFAULT_LIMIT_MAXPROC="64"
DEFAULT_LIMIT_OPENFILES="16384" # this is required f.e. for Postgresql to work properly
DEFAULT_LIMIT_MAXPTS="16"
DEFAULT_CELLS_LOCATION="/Jails/Prison/Cells"
DEFAULT_SENTRY_LOCATION="/Jails/Prison/Sentry"
DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
CELL_IP_ADDRESSES_ATTRIBUTE="jail.ip.addresses"
CELL_OS_VERSION_ATTRIBUTE="jail.os.version"
CELL_VLAN_NUMBER_ATTRIBUTE="jail.vlan.number"
CELL_ATTRIBUTES_DIR="jail-attributes"
CELL_DOMAINS_DIR="jail-domains"
CELL_WEBCONF_DIR="jail-webconfs"
CELL_LOGS_DIR="jail-loggers"
JAIL_CONF_NAME="jail.conf"
JAIL_TRUSS_NAME="jail.truss.log"
JAIL_TRUSS_EXEC_NAME="jail.truss.exec.log"
JAIL_ID_NAME="jail.id"
JAIL_STATUS_NAME="jail.status"
JAIL_RUNNING_INDICATOR="jail.running"
DEFAULT_HOST_ADDRESS="/etc/host.default"
DEFAULT_JAILS_FIB="1"
GVR_SCRIPT_NAME="$(${BASENAME_BIN} $0)"
DEFAULT_INTERFACE="$(${ROUTE_BIN} show -net 0 | ${TAIL_BIN} -n 4 | ${HEAD_BIN} -n 1 | ${AWK_BIN} '{print $2;}')"
GVR_HOST_IP_ADDR="$(ifconfig ${DEFAULT_INTERFACE} | ${GREP_BIN} -v grep | ${GREP_BIN} inet | ${AWK_BIN} '{print $2;}')"
if [ "${DEFAULT_INTERFACE}" = "" ]; then
    error "Something is wrong with network routing. Governor can't continue"
fi
DEFAULT_JAIL_ETC_SOURCE="${SERVED_REPO}/etc-jail/"
if [ ! -d "${DEFAULT_JAIL_ETC_SOURCE}" ]; then
    error "Sanity check failed: Could not found etc source location: ${DEFAULT_JAIL_ETC_SOURCE}. Governor can't continue"
fi


# This is where all jail settings are put into global scope of script:
set_values () {
    ENTERED_NAME="${1}"
    CELL="${DEFAULT_CELLS_LOCATION}/${ENTERED_NAME}"
    SENTRY="${DEFAULT_SENTRY_LOCATION}/${ENTERED_NAME}"
    debug "Processing CELL: ${CELL}, Sentry: ${SENTRY}"
    JAIL_DOMAINS_DIR="${SENTRY}/${CELL_DOMAINS_DIR}"
    JAIL_CONF_FILE="${SENTRY}/${JAIL_CONF_NAME}"
    JAIL_ATTRIBUTES_DIR="${SENTRY}/${CELL_ATTRIBUTES_DIR}"
    JAIL_NAME="$(${PRINTF_BIN} "${ENTERED_NAME}\n" | ${SED_BIN} 's/\./-/g')"
    JAIL_ID_FILE="${SENTRY}/${JAIL_ID_NAME}"
    JAIL_TRACE_LOG="${SENTRY}/${JAIL_TRUSS_NAME}"
    JAIL_EXEC_LOG="${SENTRY}/${JAIL_TRUSS_EXEC_NAME}"
    DEBUG_COMMAND=""
    DEBUG_EXEC_COMMAND=""
    if [ "${DEBUG}" = "true" ]; then
        DEBUG_COMMAND="${TRUSS_BIN} -o ${JAIL_TRACE_LOG}"
        DEBUG_EXEC_COMMAND="${TRUSS_BIN} -o ${JAIL_EXEC_LOG}"
    fi
    JAIL_VLAN_NUMBER_FILE="${SENTRY}/${CELL_VLAN_NUMBER_ATTRIBUTE}"
    JAIL_VERSION_FILE="${SENTRY}/${CELL_OS_VERSION_ATTRIBUTE}"
    JAIL_ADDRESSES_FILE="${SENTRY}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
    JAIL_WEBSERVER_CONF_DIR="${SENTRY}/${CELL_WEBCONF_DIR}"
    JAIL_LOGS_CONF_DIR="${SENTRY}/${CELL_LOGS_DIR}"
    JAIL_STATUS_FILE="${SENTRY}/${JAIL_STATUS_NAME}"
    JAIL_STATUS_DETAIL=""
    if [ -f "${JAIL_STATUS_FILE}" ]; then
        JAIL_STATUS_DETAIL="$(${CAT_BIN} ${JAIL_STATUS_FILE})"
    fi
    JAIL_STATUS="${red}*off*${gray} ${JAIL_STATUS_DETAIL}${reset} -JAILNAME: ${JAIL_NAME}"
    ${JLS_BIN} -v | ${GREP_BIN} "${JAIL_NAME}.*ACTIVE" >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        JAIL_STATUS="${green}*on*${gray} ${JAIL_STATUS_DETAIL}${reset}"
    fi
    debug "Got jail status: ${JAIL_SOURCE}"
    JAIL_VERSION="${DEFAULT_VERSION}"
    if [ -f "${JAIL_VERSION_FILE}" ]; then
        JAIL_VERSION="$(${CAT_BIN} ${JAIL_VERSION_FILE})"
    fi
    if [ -f "${JAIL_VLAN_NUMBER_FILE}" ]; then
        VLAN_NUMBER="$(${CAT_BIN} ${JAIL_VLAN_NUMBER_FILE})"
    fi
    debug "Got jail os version: ${JAIL_VERSION}"
    JAIL_SOURCE="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${JAIL_VERSION}-${SYSTEM_ARCH}"
    debug "Got jail source: ${JAIL_SOURCE}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} "${JAIL_ADDRESSES_FILE}")"
    fi
    debug "Got jail IP(s): ${JAIL_IPS}"
    HOSTNAMES=""
    for hostnfile in $(${FIND_BIN} ${JAIL_DOMAINS_DIR} -type f 2>${LOG_FILE}); do
        hostn="$(${CAT_BIN} ${hostnfile} | ${GREP_BIN} "local-zone:" | ${SED_BIN} 's/^.* "//;s/.".*//')"
        debug "hostn: ${hostn}"
        HOSTNAMES="*.${hostn} ${HOSTNAMES}"
    done
    debug "Got jail hostnames: ${HOSTNAMES}"
    JAIL_LOCAL_DOMAIN_CONF="${JAIL_DOMAINS_DIR}/local.conf"
}


check_cell_name () {
    GIVEN_NAME="${1}"
    NAME="$(${BASENAME_BIN} ${GIVEN_NAME})"
    if [ ! -d "${GIVEN_NAME}" ]; then
        error "Bad jail name: ${NAME}"
    fi
}


apply_attributes () {
    debug "Applying default attributes for jail: ${JAIL_NAME}"
    ${RCTL_BIN} -a jail:${JAIL_NAME}:memoryuse:deny=${DEFAULT_LIMIT_MAX_MEMORY}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:vmemoryuse:deny=${DEFAULT_LIMIT_MAX_VMEMORY}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:maxproc:deny=${DEFAULT_LIMIT_MAXPROC}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:openfiles:deny=${DEFAULT_LIMIT_OPENFILES}
    ${RCTL_BIN} -a jail:${JAIL_NAME}:pseudoterminals:deny=${DEFAULT_LIMIT_MAXPTS}

    debug "Applying attributes from location: ${JAIL_ATTRIBUTES_DIR} for jail: ${JAIL_NAME}"
    ${MKDIR_BIN} -p "${JAIL_DOMAINS_DIR}" "${JAIL_ATTRIBUTES_DIR}" "${JAIL_WEBSERVER_CONF_DIR}" "${JAIL_LOGS_CONF_DIR}"
    cd ${JAIL_ATTRIBUTES_DIR}
    for attribute in $(${LS_BIN}); do
        debug "List: $(${LS_BIN})"
        value="$(${CAT_BIN} ${JAIL_ATTRIBUTES_DIR}/${attribute})"
        case "${attribute}" in
            key)
                ${MKDIR_BIN} -p ${CELL}/User/.ssh
                a_key="ssh-ed25519 ${value} ${JAIL_NAME}\n"
                ${PRINTF_BIN} "${a_key}" >> ${CELL}/User/.ssh/authorized_keys
                ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID}:${DEFAULT_WORKER_UID} ${CELL}/User/.ssh
                ;;

            ip)
                note "Setting IPs: ${value} for jail: ${JAIL_NAME}"
                debug "conf: ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
                ${PRINTF_BIN} "${value}" > ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}
                ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${value};#" ${JAIL_CONF_FILE}
                ${RM_BIN} -f ${JAIL_ATTRIBUTES_DIR}/${attribute}
                ;;

            +ip)
                file_size="$(stat -f%z ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE})"
                if [ "${file_size}" -gt "0" ]; then
                    ${PRINTF_BIN} ",${value}" >> ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE}
                    current_value="$(${CAT_BIN} ${DEFAULT_SENTRY_LOCATION}/${JAIL_NAME}/${CELL_IP_ADDRESSES_ATTRIBUTE} | ${TR_BIN} '\n' ',' | ${SED_BIN} -E 's/[,]{2,}/,/g;s/,$//;s/^[,]{1,}//g')"
                    debug "Current value: ${current_value}"
                    ${SED_BIN} -i '' -e "s#ip4\.addr.*;\$#ip4.addr = ${current_value};#" ${JAIL_CONF_FILE}
                fi
                ${RM_BIN} -f ${JAIL_ATTRIBUTES_DIR}/${attribute}
                ;;

            quota-root)
                note "Setting root dir quota of: ${value} to ${DEFAULT_ZPOOL}${CELL}"
                ${ZFS_BIN} set quota="${value}" ${DEFAULT_ZPOOL}${CELL}
                ;;

            quota)
                note "Setting quota of: ${value} to ${DEFAULT_ZPOOL}/*/${JAIL_NAME}"
                for dest in Software Services User; do
                    ${ZFS_BIN} set quota="${value}" ${DEFAULT_ZPOOL}/${dest}/${JAIL_NAME}
                done
                ;;

            quota-software)
                note "Setting quota of: ${value} to ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}"
                ${ZFS_BIN} set quota="${value}" ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}
                ;;

            quota-services)
                note "Setting quota of: ${value} to ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}"
                ${ZFS_BIN} set quota="${value}" ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}
                ;;

            quota-user)
                note "Setting quota of: ${value} to ${DEFAULT_ZPOOL}/User/${JAIL_NAME}"
                ${ZFS_BIN} set quota="${value}" ${DEFAULT_ZPOOL}/User/${JAIL_NAME}
                ;;

            *)
                ${RCTL_BIN} -a jail:${JAIL_NAME}:${attribute}:deny=${value} >> ${LOG_FILE} 2>&1
                if [ "$?" = "0" ]; then
                    note "Overriden attribute: ${attribute} with value: ${value}"
                else
                    warn "Wrong attribute: ${red}${attribute}${reset}"
                fi
                ;;

        esac
    done
}


# update_sofin () {
#     DESTINATION_CELL="${1}"
#     if [ -d "${SOFIN_REPO}" ]; then
#         note "Updating Sofin from official repository"
#         cd ${SOFIN_REPO}
#         ${GIT_BIN} stash save "sofin-local-changes-$(date +%F)" >> ${LOG_FILE} 2>&1
#         GIT_SSL_NO_VERIFY=true ${GIT_BIN} pull ${DEFAULT_SOFIN_REPO} >> ${LOG_FILE} 2>&1
#         PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
#         ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
#     else
#         note "Installing Sofin installed in system path"
#         cd /var
#         GIT_SSL_NO_VERIFY=true ${GIT_BIN} clone ${DEFAULT_SOFIN_REPO} >> ${LOG_FILE} 2>&1
#         PREFIX="${JAIL_SOURCE}" bin/install >> ${LOG_FILE} 2>&1
#         ${CP_BIN} "${SOFIN_REPO}/src/${CONF_NAME}" "${DESTINATION_CELL}/etc/"
#     fi
# }


check_jail_address () {
    JAIL_ADDRESS_CHECK="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        IP_FILE="${DEFAULT_SENTRY_LOCATION}/${jail}/${CELL_IP_ADDRESSES_ATTRIBUTE}"
        if [ -f "${IP_FILE}" ]; then
            for ip in $(${CAT_BIN} ${IP_FILE} | ${TR_BIN} ',' '\n'); do
                JAIL_ADDRESS_CHECK=$(${PRINTF_BIN} "${JAIL_ADDRESS_CHECK}" | ${TR_BIN} ',' '\n')
                for addrchk in ${JAIL_ADDRESS_CHECK}; do
                    echo "${ip}" | ${GREP_BIN} "${addrchk}" > /dev/null 2>&1
                    if [ "$?" = "0" ]; then
                        error "Address: ${addrchk} is already assigned to jail: ${jail}"
                    fi
                done
            done
        fi
    done
}


check_jail_name () {
    GIVEN_NAME="${1}"
    for jail in $(${LS_BIN} ${DEFAULT_SENTRY_LOCATION}); do
        if [ "${jail}" = "${GIVEN_NAME}" ]; then
            error "Name: ${GIVEN_NAME} is already used"
        fi
    done
}


attributes_show () {
    # NOTE: resources, taken from FreeBSD "rctl" man page:
    note "Attributes with description:"
    ${PRINTF_BIN} "   ${cyan}pcpu${gray}: ${green}CPU percentage${reset}\n"
    ${PRINTF_BIN} "   ${cyan}cputime${gray}: ${green}CPU time, in seconds${reset}\n"
    ${PRINTF_BIN} "   ${cyan}datasize${gray}: ${green}data size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}stacksize${gray}: ${green}stack size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}coredumpsize${gray}: ${green}core dump size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memoryuse${gray}: ${green}resident set size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}memorylocked${gray}: ${green}locked memory, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}maxproc${gray}: ${green}number of processes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}openfiles${gray}: ${green}file descriptor table size${reset}\n"
    ${PRINTF_BIN} "   ${cyan}vmemoryuse${gray}: ${green}address space limit, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}pseudoterminals${gray}: ${green}number of PTYs${reset}\n"
    ${PRINTF_BIN} "   ${cyan}swapuse${gray}: ${green}swap usage, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nthr${gray}: ${green}number of threads${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqqueued${gray}: ${green}number of queued SysV messages${reset}\n"
    ${PRINTF_BIN} "   ${cyan}msgqsize${gray}: ${green}SysV message queue size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nmsgq${gray}: ${green}number of SysV message queues${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsem${gray}: ${green}number of SysV semaphores${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nsemop${gray}: ${green}number of SysV semaphores modified in a single semop(2) call${reset}\n"
    ${PRINTF_BIN} "   ${cyan}nshm${gray}: ${green}number of SysV shared memory segments${reset}\n"
    ${PRINTF_BIN} "   ${cyan}shmsize${gray}: ${green}SysV shared memory size, in bytes${reset}\n"
    ${PRINTF_BIN} "   ${cyan}wallclock${gray}: ${green}wallclock time, in seconds${reset}\n"
    ${PRINTF_BIN} "   ${cyan}quota${gray}: ${green}quota value for /Services, /User and /Software datasets (fmt: 1G 512M 128K). ${reset}\n"
    ${PRINTF_BIN} "   ${cyan}quota-services${gray}: ${green}quota value for /Services dataset only (fmt: 1G 512M 128K). ${reset}\n"
    ${PRINTF_BIN} "   ${cyan}quota-user${gray}: ${green}quota value for /User dataset only (fmt: 1G 512M 128K). ${reset}\n"
    ${PRINTF_BIN} "   ${cyan}quota-software${gray}: ${green}quota value for /Software dataset only (fmt: 1G 512M 128K). ${reset}\n"
    ${PRINTF_BIN} "   ${cyan}quota-root${gray}: ${green}quota value for jail base (/) system dataset only (fmt: 1G 512M 128K)${reset}\n"
    ${PRINTF_BIN} "   ${cyan}key${gray}: ${green}SSH public key (Skip public key header and comment parts) to be added to authorized keys of jail${reset}\n"
    ${PRINTF_BIN} "   ${cyan}ip${gray}: ${green}change jail IP addresses (comma separated) [requires jail restart]${reset}\n"
    ${PRINTF_BIN} "   ${cyan}+ip${gray}: ${green}adds specified (comma separated) IP addresses to jail [requires jail restart]${reset}\n"
}


name_and_version () {
    SYSTEM_VERSION="$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT)"
    note "ServeD-OS: ${cyan}${SYSTEM_VERSION}${reset}"
    note "ServeD GoVeRnor: ${cyan}v${GVR_VERSION}${reset}"
}


mark_running () {
    ${PRINTF_BIN} "$(${DATE_BIN} +%F-%H%M%S)\n" > ${SENTRY}/${JAIL_RUNNING_INDICATOR}
}


jail_create () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} create myname IP/Netmask,IP2/Netmask(, … )"
        note
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    check_jail_name ${GIVEN_NAME}
    JAIL_ADDRESSES="${2}"
    if [ "${JAIL_ADDRESSES}" = "" ]; then
        usage
        error "No ip given"
    fi
    check_jail_address ${JAIL_ADDRESSES}

    JAIL_VERSION="${3}"
    if [ "${JAIL_VERSION}" = "" ]; then
        JAIL_VERSION="${DEFAULT_VERSION}"
    fi

    VLAN_NUMBER="$(jot -r 1 10 4090)" # pick Random vlan Number between 10 and 4090
    ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} > /dev/null 2>&1
    while [ "$?" = "0" ]; do
        VLAN_NUMBER="$(jot -r 1 10 4090)"
        ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} > /dev/null 2>&1
    done

    set_values "${GIVEN_NAME}"

    ${ZFS_BIN} create -o mountpoint=${SENTRY} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} set quota=${DEFAULT_SENTRY_LIMIT} ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1

    if [ -f "${JAIL_CONF_FILE}" ]; then
        warn "Jail already configured"
    else
        ADDRESSES_LIST="$(echo ${JAIL_ADDRESSES} | ${TR_BIN} ',' '\n')"
        note "Configuring jail for addresses: ${JAIL_ADDRESSES}"
        ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} create > /dev/null 2>&1
        ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} ${VLAN_DEVICE} ${VLAN_NUMBER} vlandev ${DEFAULT_INTERFACE} > /dev/null 2>&1
        for ip in ${ADDRESSES_LIST}; do
            ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} ${ip} alias
        done
        ifconfig ${BRIDGE_DEVICE} create > /dev/null 2>&1
        ifconfig ${BRIDGE_DEVICE}  > /dev/null 2>&1
        ifconfig ${BRIDGE_DEVICE} addm ${DEFAULT_INTERFACE} stp ${DEFAULT_INTERFACE} sticky ${DEFAULT_INTERFACE} >> ${LOG_FILE} 2>&1
        ifconfig ${BRIDGE_DEVICE} addm ${VLAN_DEVICE}${VLAN_NUMBER} sticky ${VLAN_DEVICE}${VLAN_NUMBER} >> ${LOG_FILE} 2>&1 # private vlan${VLAN_NUMBER}
        ${PRINTF_BIN} "
${JAIL_NAME} {
    # name = \"${JAIL_NAME}\";
    host.hostname = \"${JAIL_NAME}\";
    ip4.addr = ${JAIL_ADDRESSES};
    interface = ${VLAN_DEVICE}${VLAN_NUMBER};
    path = \"${CELL}\";
    exec.fib = ${DEFAULT_JAILS_FIB};
    exec.start = \"/bin/sh /etc/rc\";
    exec.stop = \"/bin/sh /etc/rc.shutdown\";
    exec.clean;
    # exec.prestart = \"\";
    enforce_statfs = 1;
    allow.mount = 1;
    allow.mount.zfs = 1;
    allow.mount.nullfs = 1;
    allow.mount.tmpfs = 1;
    allow.raw_sockets = 1;
    allow.sysvipc = 1;
    mount.devfs;
    persist;
}
" >> ${JAIL_CONF_FILE}
    fi

    LAST=""
    DEFAULT_JAILS_ROOT_DIR="${DEFAULT_JAIL_SHARED_LOCATION}/${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}"
    note "Looking for snapshots of ${DEFAULT_JAILS_ROOT_DIR}"
    ${ZFS_BIN} list -t snap | ${GREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        LAST="$(${ZFS_BIN} list -t snap 2> /dev/null | ${GREP_BIN} "${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}@" | ${SED_BIN} 's/.*@//;s/ .*//' | tail -n 1)"
        note "Last snapshot of '${SYSTEM_NAME}-${DEFAULT_VERSION}-${SYSTEM_ARCH}' is '${LAST}'."
    fi
    if [ "${LAST}" = "" ]; then
        LAST="origin"
        warn "No snapshots found of base: '${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}'. Creating origin snapshot."
        ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${ORIGIN}
    fi

    note "Cloning last jail system base: '${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${LAST}' to ${CELL}"
    ${ZFS_BIN} clone ${DEFAULT_ZPOOL}${DEFAULT_JAILS_ROOT_DIR}@${LAST} ${DEFAULT_ZPOOL}${CELL}

    note "Looking for origin snapshot of ${DEFAULT_ZPOOL}/Software/root"
    ${ZFS_BIN} list -t snap | ${GREP_BIN} "${DEFAULT_ZPOOL}/Software/root@${ORIGIN}" > /dev/null 2>&1
    if [ "$?" != "0" ]; then
        error "Something went wrong. Missing origin snapshot: '${DEFAULT_ZPOOL}/Software/root@${ORIGIN}'. Aborting."
    fi
    note "Cloning from origin: ${DEFAULT_ZPOOL}/Software/root@${ORIGIN}"
    debug "Cloning /Software/root: '${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}'"
    ${ZFS_BIN} clone ${DEFAULT_ZPOOL}/Software/root@${ORIGIN} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}

    note "Creating jail filesystems"
    for dset in Software Services User Shared; do
        ${ZFS_BIN} create -p ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}
        ${ZFS_BIN} set mountpoint=none ${DEFAULT_ZPOOL}/${dset}
        ${ZFS_BIN} set mountpoint=/${dset} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}
        ${ZFS_BIN} set quota=${DEFAULT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}
        ${ZFS_BIN} allow everyone xattr,atime,casesensitivity,checksum,copies,logbias,primarycache,secondarycache,snapdir,userused,dedup,mountpoint,canmount,userprop,create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive,reservation ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}
        ${ZFS_BIN} set jailed=on ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME}
    done
    ${ZFS_BIN} set quota=${DEFAULT_ROOT_QUOTA_LIMIT} ${DEFAULT_ZPOOL}${CELL}

    note "Setting up ZFS deduplication on Jails and Software"
    ${ZFS_BIN} set dedup=on ${DEFAULT_ZPOOL}/Software
    ${ZFS_BIN} set dedup=on ${DEFAULT_ZPOOL}/Jails
    ${ZFS_BIN} set dedup=on ${DEFAULT_ZPOOL}/Shared
    ${ZFS_BIN} set compression=lz4 ${DEFAULT_ZPOOL}/Software
    ${ZFS_BIN} set compression=lz4 ${DEFAULT_ZPOOL}/Shared

    note "Making required jail directories and user dir"
    ${MKDIR_BIN} -p "${JAIL_WEBSERVER_CONF_DIR}" \
                    "${JAIL_ATTRIBUTES_DIR}" \
                    "${JAIL_DOMAINS_DIR}" \
                    "${JAIL_LOGS_CONF_DIR}" \
                    "${CELL}/SystemUsers" \
                    "${CELL}/tmp" \
                    "${CELL}/dev" \
                    "${CELL}/var/log" \
                    "${CELL}/var/tmp" \
                    "${CELL}/Software" \
                    "${CELL}/Services" \
                    "${CELL}/Shared" \
                    "${CELL}/User"

    note "Copying volatile part of jail"
    ${PRINTF_BIN} "${VLAN_NUMBER}\n" > ${JAIL_VLAN_NUMBER_FILE}
    ${PRINTF_BIN} "${JAIL_VERSION}\n" > ${JAIL_VERSION_FILE}
    ${PRINTF_BIN} "${JAIL_ADDRESSES}\n" >> ${JAIL_ADDRESSES_FILE}

    note "Building initial jail environment"
    ${CP_BIN} -R ${DEFAULT_JAIL_ETC_SOURCE} ${CELL}/etc
    ${SED_BIN} -i '' -e "s:__JAIL_NAME:${JAIL_NAME}.home:" ${CELL}/etc/rc.conf
    ${SED_BIN} -i '' -e "s:__HOST_IP:${GVR_HOST_IP_ADDR}:" ${CELL}/etc/resolv.conf

    note "Installing Sofin to '${CELL}'."
    ${CP_BIN} -v /etc/s.conf ${CELL}/etc/
    ${CP_BIN} -v /usr/bin/s ${CELL}/usr/bin/s

    note "Updating sysctl.conf"
    test -f ${CELL}/etc/sysctl.conf || ${CP_BIN} -v ${SERVED_REPO}/etc-jail/sysctl.conf ${CELL}/etc/sysctl.conf

    ${CP_BIN} /etc/zshenv ${CELL}/etc
    # ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID} ${CELL}/tmp ${CELL}/var/tmp

    note "Updating client system version property from base system"
    VER=$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT)
    ${ZFS_BIN} set com.svd:version="${VER}" ${DEFAULT_ZPOOL}${CELL}

    note "Creating user loggers"
    for logger in messages production staging development; do
        ${MKFIFO_BIN} -m "a=-rwx,u=rw" "${CELL}/var/log/${logger}"
        ${CHOWN_BIN} ${DEFAULT_WORKER_UID} "${CELL}/var/log/${logger}"
        ${PRINTF_BIN} "
source s_${JAIL_NAME}_${logger} {
    pipe(\"${CELL}/var/log/${logger}\");
};
destination d_${JAIL_NAME}_${logger}_file {
    file(\"/var/log/${JAIL_NAME}-${logger}.log\" template(t_default_format));
};
log {
    source(s_${JAIL_NAME}_${logger});
    destination(d_${JAIL_NAME}_${logger}_file);
};
" > ${JAIL_LOGS_CONF_DIR}/${logger}.conf
    done

    note "Reloading syslog"
    service syslog-ng reload || service syslog-ng restart

    note "Setting up home domains from main IPs: ${JAIL_ADDRESSES}"
    MAIN_JAIL_ADDRESS="$(echo "${JAIL_ADDRESSES}" | ${SED_BIN} -e 's#/.*# #g')"

    ${PRINTF_BIN} "
# Default home zone template:
local-zone: \"${JAIL_NAME}.home.\" redirect

local-data: \"${JAIL_NAME}.home. 10800 IN NS ns1.${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 10800 IN NS ns2.${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 1800  IN SRV 10 10 22 ${JAIL_NAME}.home.\"
local-data: \"${JAIL_NAME}.home. 10800 IN SOA ns1.${JAIL_NAME}.home. ns2.${JAIL_NAME}.home. $(${DATE_BIN} +%s) 3600 600 86400 3600\"
local-data: \"${JAIL_NAME}.home. 10800 IN A ${MAIN_JAIL_ADDRESS}\"

local-data-ptr: \"${MAIN_JAIL_ADDRESS} ${JAIL_NAME}.home\"

" >> ${JAIL_LOCAL_DOMAIN_CONF}

    note "Initializing '${JAIL_NAME}.home' zone."
    service local_unbound configtest && service local_unbound restart
    if [ "$?" = "0" ]; then
        jail_start "${JAIL_NAME}"
    else
        error "Failed to successfully reload Unbound resolver!"
    fi
}


jail_status () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} status jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    VERBOSE="${2}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    ${PRINTF_BIN} "Status: ${JAIL_STATUS}\n"
    echo ${JAIL_STATUS} | ${GREP_BIN} '\*on\*' > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        JAIL_NUM_ID="$(${JLS_BIN} -v | ${GREP_BIN} "${JAIL_NAME}.*${JAIL_NAME}" | ${AWK_BIN} '{print $1;}')"
        ${PRINTF_BIN} "JID: ${green}${JAIL_NUM_ID}${reset}\n"
    fi
    ${PRINTF_BIN} "Name: ${green}${JAIL_NAME}${reset}\n"
    ${PRINTF_BIN} "IPv4s: ${green}${JAIL_IPS}${reset}\n"
    ${PRINTF_BIN} "Interface: ${green}${VLAN_DEVICE}${VLAN_NUMBER}${reset}\n"
    ${PRINTF_BIN} "Hostnames: ${green}${HOSTNAMES}${reset}\n"
    ${PRINTF_BIN} "OS version: ${green}${JAIL_VERSION}${reset}\n\n"
    if [ -d "${JAIL_ATTRIBUTES_DIR}" ]; then
        ${PRINTF_BIN} "Overriden attributes:\n"
        for i in $(${FIND_BIN} ${JAIL_ATTRIBUTES_DIR} -type f); do
            ${PRINTF_BIN} "${cyan}$(${BASENAME_BIN} ${i}): $(${CAT_BIN} ${i})${reset}\n"
        done
        ${PRINTF_BIN} "\n"
    fi
    ${PRINTF_BIN} "Live attributes:\n${cyan}$(${RCTL_BIN} -h jail:${JAIL_NAME} | ${SED_BIN} 's/jail:n1://g' | ${SED_BIN} 's/:deny=/: /g')${reset}\n"
    case ${VERBOSE} in
        v|-v|-verbose|verbose|more)
            ${PRINTF_BIN} "\nFull configuration:"
            ${PRINTF_BIN} "${cyan}$(${CAT_BIN} "${JAIL_CONF_FILE}")\n"
            ;;
    esac
}


jail_list () {
    cd ${DEFAULT_CELLS_LOCATION}
    for cell in $(${LS_BIN}); do
        cellname="$(${PRINTF_BIN} "${cell}" | ${AWK_BIN} '{print substr($1,0,29);}')" # first 29 chars visible in jls output
        ${PRINTF_BIN} "${cell}"
        if [ -f "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" ]; then
            JAIL_IPS="$(${CAT_BIN} "${DEFAULT_SENTRY_LOCATION}/${cellname}/${CELL_IP_ADDRESSES_ATTRIBUTE}" | ${TR_BIN} '\n' ',' | ${SED_BIN} -e 's/,$//')"
        fi
        ${JLS_BIN} -v | ${GREP_BIN} "${cellname}.*ACTIVE" >> ${LOG_FILE} 2>&1
        if [ "$?" = "0" ]; then
            ${PRINTF_BIN} " ${cyan}${JAIL_IPS}${reset} ${green}*on*${reset}"
        else
            ${PRINTF_BIN} " ${cyan}${JAIL_IPS}${reset} ${red}*off*${reset}"
        fi
        ${PRINTF_BIN} "\n"
    done
}


# Apply settings and start jail
jail_start () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} start jail-name${reset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to start"
    fi
    set_values "${GIVEN_NAME}"

    ${JLS_BIN} -v | ${GREP_BIN} "${GIVEN_NAME}.*${GIVEN_NAME}" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        note "Jail ${GIVEN_NAME} is already running"
        exit 0
    fi

    check_cell_name "${CELL}"
    if [ -f "${JAIL_ADDRESSES_FILE}" ]; then
        JAIL_IPS="$(${CAT_BIN} ${JAIL_ADDRESSES_FILE} | ${TR_BIN} ',' '\n')"
    fi

    # note "Running jail static configuration"
    # for dset in Services Software User; do
    #     ${ZFS_BIN} set jailed=off ${DEFAULT_ZPOOL}/${dset} > /dev/null 2>&1
    #     ${ZFS_BIN} set mountpoint=none ${DEFAULT_ZPOOL}/${dset} > /dev/null 2>&1
    # done

    # sanity check - required to spawn jail
    ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} create > /dev/null 2>&1

    note "Deploying jail: ${JAIL_NAME}"
    ${DEBUG_COMMAND} ${JAIL_BIN} -c -J ${JAIL_ID_FILE} -f ${JAIL_CONF_FILE} >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        note "Configuring ${VLAN_DEVICE}${VLAN_NUMBER}"
        ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} ${VLAN_DEVICE} ${VLAN_NUMBER} vlandev ${DEFAULT_INTERFACE} > /dev/null 2>&1
        for ip in ${JAIL_IPS}; do
            ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} ${ip} alias
        done
        ifconfig ${BRIDGE_DEVICE} create > /dev/null 2>&1
        ifconfig ${BRIDGE_DEVICE} addm ${DEFAULT_INTERFACE} stp ${DEFAULT_INTERFACE} sticky ${DEFAULT_INTERFACE} >> ${LOG_FILE} 2>&1
        ifconfig ${BRIDGE_DEVICE} addm ${VLAN_DEVICE}${VLAN_NUMBER} sticky ${VLAN_DEVICE}${VLAN_NUMBER} >> ${LOG_FILE} 2>&1 # private ${VLAN_DEVICE}${VLAN_NUMBER}

        JAIL_NUM_ID="$(${JLS_BIN} -v | ${GREP_BIN} "${JAIL_NAME}.*${JAIL_NAME}" | ${AWK_BIN} '{print $1;}')"
        note "Jailing ZFS for jid: ${JAIL_NUM_ID}"

        ${PRINTF_BIN} "[launched by ${USER} on $(${DATE_BIN} +%F-%H%M%S)]" > "${JAIL_STATUS_FILE}"
        # note "Launching Service Spawner daemon"
        # ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} ${IGNITER_INSTALL_BIN} >> ${LOG_FILE} 2>&1
        # ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} daemon ${SERVICE_SPAWNER_BIN}

        # alow users creating / in their tree. why not.
        ${JEXEC_BIN} -U root ${JAIL_NAME} ${CHMOD_BIN} 777 / >> ${LOG_FILE} 2>&1
        ${JEXEC_BIN} -U root ${JAIL_NAME} secadm -c /etc/secadm.rules set >> ${LOG_FILE} 2>&1

        # ${JEXEC_BIN} -U root ${JAIL_NAME} ${IGNITER_INSTALL_BIN} >> ${LOG_FILE} 2>&1
        # ${JEXEC_BIN} -U root ${JAIL_NAME} daemon ${SERVICE_SPAWNER_BIN}
        apply_attributes

        ${ZFS_BIN} jail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/Software/${JAIL_NAME}
        ${ZFS_BIN} jail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/User/${JAIL_NAME}
        ${ZFS_BIN} jail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/Services/${JAIL_NAME}
        ${ZFS_BIN} jail ${JAIL_NUM_ID} ${DEFAULT_ZPOOL}/Shared/${JAIL_NAME}

        ${JEXEC_BIN} -U root ${JAIL_NAME} ${CHMOD_BIN} +s /sbin/zfs /sbin/sysctl # Make sure that these have setuid set!
        ${JEXEC_BIN} -U ${DEFAULT_JAIL_USER} ${JAIL_NAME} ${ZFS_BIN} mount -a
        ${JEXEC_BIN} -U root ${JAIL_NAME} ${CHOWN_BIN} -R ${DEFAULT_WORKER_UID} /Services /User /Software /Shared
        ${JEXEC_BIN} -U root ${JAIL_NAME} ${CHMOD_BIN} 4755 /Software/Sudo-static/exports/sudo
        ${JEXEC_BIN} -U root ${JAIL_NAME} sysctl kern.securelevel=${KERN_SECURELEVEL} > /dev/null 2>&1

        if [ ! -e "${CELL}/User/.zshrc" ]; then
            note "Creating default user environment file for zsh"
            ${GREP_BIN} -R "sofin reload" "${CELL}/User/.zshrc" > /dev/null 2>&1 || ${PRINTF_BIN} "sofin reload\n" >> "${CELL}/User/.zshrc"
        fi

        mark_running
    else
        ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} destroy > /dev/null 2>&1
        error "Jail launch failed. Look into log file: ${LOG_FILE}"
    fi
}


jail_stop () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} stop jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to stop"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    note "Terminating jail: ${JAIL_NAME}"

    ${DEBUG_EXEC_COMMAND} ${JAIL_BIN} -r "${JAIL_NAME}" >> ${LOG_FILE} 2>&1
    ${PRINTF_BIN} "[terminated by ${USER} on $(${DATE_BIN} +%F-%H-%M-%S)]" > "${JAIL_STATUS_FILE}"

    note "Unmounting jail datasets"
    for dir in /dev; do
        ${UMOUNT_BIN} -f "${CELL}${dir}" >> ${LOG_FILE} 2>&1
    done
    for dset in Services User Software; do
        ${ZFS_BIN} umount -fr ${DEFAULT_ZPOOL}/${dset}/${JAIL_NAME} >> ${LOG_FILE} 2>&1
        ${UMOUNT_BIN} -f ${CELL}/${dset} >> ${LOG_FILE} 2>&1
    done
    ${ZFS_BIN} umount -fr ${DEFAULT_ZPOOL}${CELL} >> ${LOG_FILE} 2>&1
    ${ZFS_BIN} umount -fr ${DEFAULT_ZPOOL}${SENTRY} >> ${LOG_FILE} 2>&1

    note "Stopping ${VLAN_DEVICE} interface"
    ifconfig ${BRIDGE_DEVICE} deletem ${VLAN_DEVICE}${VLAN_NUMBER}
    ifconfig ${VLAN_DEVICE}${VLAN_NUMBER} destroy

    ${RM_BIN} -f ${SENTRY}/${JAIL_RUNNING_INDICATOR}
}


jail_set () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} set jail-name attribute=value attr2=val2 (...)${reset}"
    }
    GIVEN_NAME="${1}"
    shift
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for argument_pair in $@; do
        ATTRIBUTE="$(${PRINTF_BIN} "${argument_pair}\n" | ${AWK_BIN} '{split($0, a, "="); print a[1];}' )"
        JAIL_VALUE="$(${PRINTF_BIN} "${argument_pair}\n" | ${AWK_BIN} '{split($0, a, "="); print a[2];}')"
        debug "arg: ${ATTRIBUTE}, val: ${JAIL_VALUE} "
        note "Setting ${ATTRIBUTE}: ${JAIL_VALUE} for jail: ${JAIL_NAME}"
        ${PRINTF_BIN} "${JAIL_VALUE}\n" > "${JAIL_ATTRIBUTES_DIR}/${ATTRIBUTE}"
    done
    apply_attributes
}


jail_unset () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} unset jail-name attribute value${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail name given"
    fi
    shift

    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    for jail_attribute in $*; do
        note "Unsetting ${jail_attribute} for jail: ${JAIL_NAME}"
        ${RM_BIN} -f "${JAIL_ATTRIBUTES_DIR}/${jail_attribute}"
        ${RCTL_BIN} -r jail:${JAIL_NAME}:${jail_attribute} >> ${LOG_FILE} 2>&1
    done
    apply_attributes
}


jail_login () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} login jail-name${reset}"
    }
    GIVEN_NAME="${1}" # hostname?
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to enter"
    fi
    JAIL_LOGIN="${DEFAULT_JAIL_USER}"
    GIVEN_USER="${2}"
    if [ "${GIVEN_USER}" != "" ]; then
        JAIL_LOGIN="${GIVEN_USER}"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"
    ${JLS_BIN} -v | ${GREP_BIN} "$(${BASENAME_BIN} ${CELL}).*ACTIVE" >> ${LOG_FILE} 2>&1
    if [ "$?" = "0" ]; then
        note "Logging as: ${JAIL_LOGIN} to jail: ${JAIL_NAME}"
        ${DEBUG_EXEC_COMMAND} ${JEXEC_BIN} ${JAIL_NAME} login -f ${JAIL_LOGIN}
    else
        error "Start jail first"
    fi
}


jail_restart () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} restart jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to restart"
    fi
    jail_stop $*
    jail_start $*
}


jail_destroy () {
    usage () {
        note "Usage: ${cyan}${GVR_SCRIPT_NAME} destroy jail-name${reset}"
    }
    GIVEN_NAME="${1}"
    if [ "${GIVEN_NAME}" = "" ]; then
        usage
        error "No jail to destroy"
    fi
    set_values "${GIVEN_NAME}"
    check_cell_name "${CELL}"

    note "Are you sure you want to destroy jail: $(${BASENAME_BIN} ${GIVEN_NAME}) with ALL SERVICES data?"
    note "Type 'YES' to confirm"
    read ans
    if [ "${ans}" = "YES" ]; then
        jail_stop $*
        note "Destroying datasets."
        ${ZFS_BIN} destroy -rf "${DEFAULT_ZPOOL}${SENTRY}"
        ${ZFS_BIN} destroy -rf "${DEFAULT_ZPOOL}${CELL}"
        ${ZFS_BIN} destroy -rf "${DEFAULT_ZPOOL}/Software/${JAIL_NAME}"
        ${ZFS_BIN} destroy -rf "${DEFAULT_ZPOOL}/Services/${JAIL_NAME}"
        ${ZFS_BIN} destroy -rf "${DEFAULT_ZPOOL}/User/${JAIL_NAME}"
        ${RM_BIN} -rf "${CELL}" >> ${LOG_FILE} 2>&1
        ${RM_BIN} -rf "${SENTRY}" >> ${LOG_FILE} 2>&1
        # service local_unbound configtest && service local_unbound restart
    else
        note "Jail: $(${BASENAME_BIN} ${GIVEN_NAME}) left intact"
    fi
}


case $1 in
    ver|v|version)
        shift
        name_and_version
        ;;

    create|c)
        shift
        jail_create $*
        ;;

    destroy)
        shift
        jail_destroy $*
        ;;

    status|s|stat)
        shift
        jail_status $*
        ;;

    start)
        shift
        jail_start $*
        ;;

    stop)
        shift
        jail_stop $*
        ;;

    restart)
        shift
        jail_restart $*
        ;;

    list|l|lst)
        shift
        jail_list $*
        ;;

    set)
        shift
        jail_set $*
        ;;

    unset)
        shift
        jail_unset $*
        ;;

    login)
        shift
        jail_login $*
        ;;

    attributes|attrs)
        attributes_show
        ;;

    boot)
        cd ${DEFAULT_SENTRY_LOCATION}
        for jail in *; do
            if [ -f "${DEFAULT_SENTRY_LOCATION}/${jail}/${JAIL_RUNNING_INDICATOR}" ]; then
                note "Initializing boot of jail: ${jail}"
                nohup $0 start ${jail} > /dev/null 2>&1 &
            else
                warn "Boot skipped: ${jail}"
            fi
        done
        ;;

    *)
        CMD="${GVR_SCRIPT_NAME}"
        note "Usage:"
        note "  ${CMD} command arg1 arg2 [...]"
        note
        note "List of commands:"
        note "  ${cyan}ver${reset}: ${green}prints Governor and ServeD-OS versions${reset}"
        note "  ${cyan}boot${reset}: ${green}launches all previously running jails${reset}"
        note "  ${cyan}create${reset}: ${green}creates new jail${reset}"
        note "  ${cyan}list${reset} | ${cyan}lst${reset} | ${cyan}l${reset}: ${green}lists created jails${reset}"
        note "  ${cyan}set${reset}: ${green}set attributes for jails${reset}"
        note "  ${cyan}attributes${reset} | ${cyan}attrs${reset}: ${green}shows attributes list modifiable by '${CMD} set …' ${reset}"
        note "  ${cyan}login${reset}: ${green}logins to jail${reset}"
        note "  ${cyan}start${reset}: ${green}starts created, non running jail${reset}"
        note "  ${cyan}stop${reset}: ${green}stops running jail${reset}"
        note "  ${cyan}restart${reset}: ${green}restarts a jail${reset}"
        note "  ${cyan}status${reset}: ${green}shows detailed configuration of a jail${reset}"
        note "  ${cyan}destroy${reset}: ${green}destroys a jail${reset}"
        note
        note "Run '${CMD} [command]' without arguments to see detailed help about command params."
        ;;
esac


exit 0
