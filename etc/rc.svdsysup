#!/bin/sh
#
# ServeD system script to perform lockless filesystem binary updates

stty status '^T' 2> /dev/null

# Set shell to ignore SIGINT (2), but not children;
# shell catches SIGQUIT (3) and returns to single user.
trap : 2
trap "echo 'Update interrupted'; exit 1" 3

export HOME="/User"
export CONF_NAME="s.conf"
export CONF_FILE="/etc/${CONF_NAME}"
if [ -e "${CONF_FILE}" ]; then
    . "${CONF_FILE}"
else
    echo "FATAL: Sofin configuration unavailable. No file found: ${CONF_FILE}"
    exit 1
fi

readonly DEFAULT_HOST_ADDRESS_FILE="/etc/host.default"
readonly DEFAULT_INTERFACE_ADDRESS="$(${CAT_BIN} "${DEFAULT_HOST_ADDRESS_FILE}" 2>/dev/null)"
readonly UPDATE_PENDING_INDICATOR="/.svdsysup"
readonly SERVED_REPO="/var/ServeD-OS"
readonly SOFIN_REPO="/var/sofin"
readonly BACKUP_SVDINIT="/var/.svdinit"
readonly UNBOUND_CONF_DIR="/var/unbound/conf.d"
readonly UNBOUND_CONF="/var/unbound/unbound.conf"
readonly UNBOUND_CONTROL_CONF="/var/unbound/control.conf"
readonly DEFAULT_JAIL_PRISON_LOCATION="/Jails/Prison"
readonly DEFAULT_JAIL_SHARED_LOCATION="/Jails/Shared"
readonly JAIL_DOMAINS_COMMON_LOADER="include: ${DEFAULT_JAIL_PRISON_LOCATION}/Sentry/*/jail-domains/*.conf"
readonly RSYNC_DEFAULT_OPTIONS="-l -p -E -A -X -o -g -t -r --delete"

readonly SETUID_UNUSED_BINS="/bin/rsh /bin/rlogin"
readonly SETUID_BINS="/sbin/init /lib/libthr.so.3 /lib/libc.so.7 /lib/libcrypt.so.5 /libexec/ld-elf.so.1 /usr/lib/librt.so.1 /usr/bin/chfn /usr/bin/chsh /usr/bin/opiepasswd /usr/bin/crontab /usr/bin/passwd /usr/bin/chpass /usr/bin/opieinfo /usr/bin/su /usr/bin/login"

export PICKED_OS_VERSION="11.0" # the default
export TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
export SVD_LOG="/var/log/svdsysup-${TIMESTAMP}.log"
export PATH="${DEFAULT_PATH}"


debug () {
    if [ -f "/.build-host" ]; then
        cecho "# $1" ${magenta}
    fi
}


dnote () {
    note "$@" && \
    note "$@" >> ${SVD_LOG} 2>&1
}

wrun () {
    commands="$@ && sync"
    debug "Evaluating: '${commands}'" && \
    debug "Evaluating: '${commands}'" >> ${SVD_LOG} 2>&1 && \
    gitroot="$(${BASENAME_BIN} $(${BASENAME_BIN} ${GIT_BIN}))"
    eval PATH="/bin:/sbin:/usr/bin:/usr/sbin:${gitroot}/bin:${gitroot}/libexec/git-core" "${commands}" >> ${SVD_LOG} 2>&1
    if [ "$?" != "0" ]; then
        cecho "Failed to evaluate: '${commands}'" ${red} && \
        cecho "Failed to evaluate: '${commands}'" ${red} >> ${SVD_LOG} 2>&1
    fi
}

# these must be mounted to +w SVD_LOG:
note "Mounting core datasets.."
${ZFS_BIN} mount -v -a && \
note "Setting datasets writable.."
${ZFS_BIN} set readonly=off ${DEFAULT_ZPOOL} && \
${ZFS_BIN} set readonly=off ${DEFAULT_ZPOOL}/ROOT/default && \
${ZFS_BIN} set readonly=off ${DEFAULT_ZPOOL}/var && \
${ZFS_BIN} set readonly=off ${DEFAULT_ZPOOL}/var/log && \
${ZFS_BIN} set readonly=off ${DEFAULT_ZPOOL}/usr && \
sync && \
dnote "Core datasets were successfully set writable and mounted"


# From now on, we want to log each svdsysup command to the log file..

dnote "Performing pre-update snapshots: @${TIMESTAMP}"
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/var@${TIMESTAMP}

# Set snochg flags.
for f in ${SETUID_BINS}; do
    wrun chflags noschg $f
done
for f in ${SETUID_UNUSED_BINS}; do
    if [ -e "$f" ]; then
        wrun chflags noschg "$f" && \
        wrun ${RM_BIN} -f "$f"
    fi
done

# Update system version from system property
served_version="$(${ZFS_BIN} get -H -o value com.svd:version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
stored_version="$(${ZFS_BIN} get -H -o value com.svd:os_version ${DEFAULT_ZPOOL}/ROOT 2>/dev/null)"
debug "got stored_version: ${stored_version}"
debug "got served_version: ${served_version}"
if [ "${stored_version}" != "-" ]; then
    export PICKED_OS_VERSION="${stored_version}"
fi

${TEST_BIN} ! -f /etc/fstab && wrun ${TOUCH_BIN} /etc/fstab
if [ -d "/root" ]; then
    dnote "Synchronizing /root to dataset: ${DEFAULT_ZPOOL}/User/root"
    wrun ${RSYNC_BIN} ${RSYNC_DEFAULT_OPTIONS} /root/ /User && \
    wrun ${PW_BIN} user mod root -d /User && \
    wrun ${RM_BIN} -rf /root && \
    dnote "Home directory synchonized successfully"
fi

export TRIPPLE="${SYSTEM_NAME}-${PICKED_OS_VERSION}-${SYSTEM_ARCH}"
# wrun ${ZFS_BIN} mount -v ${DEFAULT_ZPOOL}${DEFAULT_JAIL_SHARED_LOCATION}/${TRIPPLE}
dnote "Clearing out unwanted dirs from: ${DEFAULT_JAIL_SHARED_LOCATION}/${TRIPPLE}"
for folder in etc media mnt proc root tmp; do
    wrun ${RM_BIN} -vrf "${DEFAULT_JAIL_SHARED_LOCATION}/${TRIPPLE}/${folder}"
done
for folder in bin lib libexec sbin usr; do
    wrun ${RSYNC_BIN} ${RSYNC_DEFAULT_OPTIONS} \
        --exclude=home --exclude=ports \
        "${DEFAULT_JAIL_SHARED_LOCATION}/${TRIPPLE}/${folder}/" "/${folder}" && \
    dnote "Synchronized: ${DEFAULT_JAIL_SHARED_LOCATION}/${TRIPPLE}/${folder}/ with: /${folder}"
done

#-------------------------------------------------------------------------------
# NOTE: always do custom software installation after rsync synchro!

wrun "cd ${SOFIN_REPO} && bin/install" && \
wrun "${INSTALL_BIN} -v ${SERVED_REPO}/gvr /usr/bin" && \
wrun "${CP_BIN} ${BACKUP_SVDINIT} /var/svdinit" && \
wrun "${INSTALL_BIN} -v /var/svdinit /sbin" && \
wrun "${RM_BIN} -f /var/svdinit" && \
dnote "Installed core software"

# motd setup
vblock="v${served_version}+v${PICKED_OS_VERSION}"
header_extension="${vblock} "
if [ -x "${GIT_BIN}" ]; then
    if [ -f "/var/${PICKED_OS_VERSION}-src/Makefile" ]; then
        cd /var/${PICKED_OS_VERSION}-src/
        head16_hbsd_sha="$(${GIT_BIN} rev-parse HEAD 2>/dev/null | ${CUT_BIN} -c -16 2>/dev/null)"
        debug "HBSD repository HEAD: ${head16_hbsd_sha}" >> ${SVD_LOG} 2>&1
        header_extension="${header_extension}#${head16_hbsd_sha}â€¦"
    else
        header_extension="\t ${header_extension} (binary)"
    fi
fi
# build motd:
wrun ${RM_BIN} -f /etc/motd
${CAT_BIN} ${SERVED_REPO}/etc/motd.served > /etc/motd
${PRINTF_BIN} "\t${header_extension}\n-----------------------------------------\n\n" >> /etc/motd
cd /

# Bring back schg flags
for f in ${SETUID_BINS}; do
    wrun chflags schg $f
done

TIMESTAMP="$(${DATE_BIN} +%s 2>/dev/null)"
dnote "Performing post-update snapshots: @${TIMESTAMP}"
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/ROOT/default@${TIMESTAMP}
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/usr@${TIMESTAMP}
wrun ${ZFS_BIN} snapshot ${DEFAULT_ZPOOL}/var@${TIMESTAMP}
for dataset in ${DEFAULT_ZPOOL}/ROOT/default ${DEFAULT_ZPOOL}/usr ${DEFAULT_ZPOOL}/var; do
    value="$(${ZFS_BIN} list -H -t snap -o name | ${GREP_BIN} "${dataset}@" 2>/dev/null | ${WC_BIN} -l 2>/dev/null | ${SED_BIN} 's/ //g' 2>/dev/null)"
    if [ ${value} -gt 5 ]; then
        LAST="$(${ZFS_BIN} list -H -t snap -o name | ${GREP_BIN} "${dataset}@" 2>/dev/null | ${SED_BIN} 's/.*@//;s/ .*//' 2>/dev/null | ${TAIL_BIN} -n 1 2>/dev/null)"
        dnote "Removing oldest snapshot of: '${dataset}@${LAST}' (${value} snapshots)"
        wrun ${ZFS_BIN} destroy "${dataset}@${LAST}"
    fi
done


generate_conf_for_unbound_resolver () {
    dnote "Generating base configuration for Unbound"
    wrun /usr/sbin/local-unbound-setup -n

    if [ ! -f "${UNBOUND_CONF_DIR}/jailed.conf" ]; then
        dnote "Creating jailed.conf loader, with contents: '${JAIL_DOMAINS_COMMON_LOADER}'"
        ${PRINTF_BIN} "${JAIL_DOMAINS_COMMON_LOADER}\n" > "${UNBOUND_CONF_DIR}/jailed.conf"
    fi

    ${PRINTF_BIN} "# Generated by ServeD updater #
server:
    username: unbound
    directory: /var/unbound
    chroot: /var/unbound
    pidfile: /var/run/local_unbound.pid
    interface: 127.0.0.1
    interface: ${DEFAULT_INTERFACE_ADDRESS}
    access-control: 10.0.0.0/8 allow
    access-control: 172.116.0.0/12 allow
    access-control: 192.168.0.0/16 allow
    outgoing-num-tcp: 1 # this limits TCP service, uses less buffers.
    incoming-num-tcp: 1
    outgoing-range: 60  # uses less memory, but less performance.
    msg-buffer-size: 8192   # dnote this limits service, 'no huge stuff'.
    msg-cache-size: 100k
    msg-cache-slabs: 1
    rrset-cache-size: 100k
    rrset-cache-slabs: 1
    infra-cache-numhosts: 200
    infra-cache-slabs: 1
    key-cache-size: 100k
    key-cache-slabs: 1
    neg-cache-size: 10k
    num-queries-per-thread: 30
    target-fetch-policy: \"2 1 0 0 0 0\"
    harden-large-queries: \"yes\"
    harden-short-bufsize: \"yes\"
    prefetch: yes
    num-threads: 1
    use-caps-for-id: yes
    harden-dnssec-stripped: yes
    harden-glue: yes
    hide-identity: yes
    hide-version: yes
    # This option requires DNSSEC setup:
    # auto-trust-anchor-file: /var/unbound/root.key

    # Load user Cells configurations
    include: /var/unbound/conf.d/*.conf

include: /var/unbound/forward.conf
include: /var/unbound/lan-zones.conf
include: /var/unbound/control.conf
" > ${UNBOUND_CONF}

    # XXX: TODO: not really secure, consider using SSL certs per server and local user domains
    ${PRINTF_BIN} "# Generated by ServeD updater #
remote-control:
    control-enable: yes
    control-interface: /var/run/local_unbound.ctl
    control-use-cert: no
" > ${UNBOUND_CONTROL_CONF}
    wrun ${CHOWN_BIN} -R unbound /var/unbound
}

# Generate Unbound configuration with a little help from local-unbound-setup:
generate_conf_for_unbound_resolver
wrun ${RM_BIN} -f ${UPDATE_PENDING_INDICATOR}

dnote
dnote "Update complete."
dnote
exit 0
